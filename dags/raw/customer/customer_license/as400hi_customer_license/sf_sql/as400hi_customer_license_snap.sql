merge into {{ params.snowDB }}.{{ params.snowSchema }}.{{ params.snowTable }} as TGT
using (select * from (select *,row_number() over(partition by HOUSE_ID,CUSTOMER_ID,LICENSE_NUMBER
order by HOUSE_ID,CUSTOMER_ID,LICENSE_NUMBER ) as r  from
 {{ params.snowDB }}.{{ params.snowSchema }}.{{ params.snowHistTablestream }})where r=1) as SRC
on SRC.HOUSE_ID = TGT.HOUSE_ID AND SRC.CUSTOMER_ID = TGT.CUSTOMER_ID AND SRC.LICENSE_NUMBER = TGT.LICENSE_NUMBER
when matched and SRC."METADATA$ACTION" = 'INSERT' then update set 
CUSTOMER_ID = SRC.CUSTOMER_ID,
LICENSE_NUMBER = SRC.LICENSE_NUMBER,
LICENSE_DESC = SRC.LICENSE_DESC,
EFFECTIVE_FROM_DATE = SRC.EFFECTIVE_FROM_DATE,
EFFECTIVE_TO_DATE = SRC.EFFECTIVE_TO_DATE,
LICENSE_TYPE = SRC.LICENSE_TYPE,
PERMITTEE = SRC.PERMITTEE,
PERMITTEE_OWNER = SRC.PERMITTEE_OWNER,
LICENSE_STATUS = SRC.LICENSE_STATUS,
HOUSE_ID = SRC.HOUSE_ID,
ETL_UPDATE_DATE = current_timestamp(), 
ETL_UPDATE_USER_ID = current_user(), 
ETL_TASK_RUN_ID = SRC.ETL_TASK_RUN_ID, 
ETL_ROW_HASH = SRC.ETL_ROW_HASH, 
RAW_FILE_NAME = SRC.RAW_FILE_NAME
 
WHEN NOT MATCHED AND SRC."METADATA$ACTION" = 'INSERT' THEN INSERT 
(
"CUSTOMER_ID",
"LICENSE_NUMBER",
"LICENSE_DESC",
"EFFECTIVE_FROM_DATE",
"EFFECTIVE_TO_DATE",
"LICENSE_TYPE",
"PERMITTEE",
"PERMITTEE_OWNER",
"LICENSE_STATUS",
"HOUSE_ID",
"ETL_CREATE_DATE", 
"ETL_CREATE_USER_ID", 
"ETL_UPDATE_DATE", 
"ETL_UPDATE_USER_ID", 
"ETL_TASK_RUN_ID",
"ETL_ROW_HASH", 
"RAW_FILE_NAME"
)
VALUES
(
"CUSTOMER_ID",
"LICENSE_NUMBER",
"LICENSE_DESC",
"EFFECTIVE_FROM_DATE",
"EFFECTIVE_TO_DATE",
"LICENSE_TYPE",
"PERMITTEE",
"PERMITTEE_OWNER",
"LICENSE_STATUS",
"HOUSE_ID",
current_timestamp(), 
current_user(), 
null, 
null, 
"ETL_TASK_RUN_ID",
"ETL_ROW_HASH", 
"RAW_FILE_NAME"
)