merge into {{ params.snowDB }}.{{ params.snowSchema }}.{{ params.snowTable }} as TGT
using (select * from (select *,row_number() over(partition by AR_CUSTOMER_ID, HOUSE_ID
order by AR_CUSTOMER_ID, HOUSE_ID ) as r  from
 {{ params.snowDB }}.{{ params.snowSchema }}.{{ params.snowHistTablestream }})where r=1) as SRC
on (SRC.AR_CUSTOMER_ID = TGT.AR_CUSTOMER_ID
and SRC.HOUSE_ID = TGT.HOUSE_ID) 
when matched and SRC."METADATA$ACTION" = 'INSERT' then update set 
HOUSE_ID = SRC.HOUSE_ID,
AR_CUSTOMER_ID = SRC.AR_CUSTOMER_ID,
AR_CUSTOMER_NAME = SRC.AR_CUSTOMER_NAME,
AR_CUSTOMER_ADDRESS_1 = SRC.AR_CUSTOMER_ADDRESS_1,
AR_CUSTOMER_ADDRESS_2 = SRC.AR_CUSTOMER_ADDRESS_2,
AR_CUSTOMER_CITY = SRC.AR_CUSTOMER_CITY,
AR_CUSTOMER_STATE = SRC.AR_CUSTOMER_STATE,
AR_CUSTOMER_ZIP_CODE = SRC.AR_CUSTOMER_ZIP_CODE,
AR_CUSTOMER_PHONE = SRC.AR_CUSTOMER_PHONE,
AR_CUSTOMER_FAX = SRC.AR_CUSTOMER_FAX,
AR_CUSTOMER_EMAIL = SRC.AR_CUSTOMER_EMAIL,
AR_CUSTOMER_NUMBER = SRC.AR_CUSTOMER_NUMBER,
ETL_UPDATE_DATE = current_timestamp(), 
ETL_UPDATE_USER_ID = current_user(), 
ETL_TASK_RUN_ID = SRC.ETL_TASK_RUN_ID, 
ETL_ROW_HASH = SRC.ETL_ROW_HASH, 
RAW_FILE_NAME = SRC.RAW_FILE_NAME
 
WHEN NOT MATCHED AND SRC."METADATA$ACTION" = 'INSERT' THEN INSERT 
(
"HOUSE_ID",
"AR_CUSTOMER_ID",
"AR_CUSTOMER_NAME",
"AR_CUSTOMER_ADDRESS_1",
"AR_CUSTOMER_ADDRESS_2",
"AR_CUSTOMER_CITY",
"AR_CUSTOMER_STATE",
"AR_CUSTOMER_ZIP_CODE",
"AR_CUSTOMER_PHONE",
"AR_CUSTOMER_FAX",
"AR_CUSTOMER_EMAIL",
"AR_CUSTOMER_NUMBER",
"ETL_CREATE_DATE", 
"ETL_CREATE_USER_ID", 
"ETL_UPDATE_DATE", 
"ETL_UPDATE_USER_ID", 
"ETL_TASK_RUN_ID",
"ETL_ROW_HASH", 
"RAW_FILE_NAME"
)
VALUES
(
"HOUSE_ID",
"AR_CUSTOMER_ID",
"AR_CUSTOMER_NAME",
"AR_CUSTOMER_ADDRESS_1",
"AR_CUSTOMER_ADDRESS_2",
"AR_CUSTOMER_CITY",
"AR_CUSTOMER_STATE",
"AR_CUSTOMER_ZIP_CODE",
"AR_CUSTOMER_PHONE",
"AR_CUSTOMER_FAX",
"AR_CUSTOMER_EMAIL",
"AR_CUSTOMER_NUMBER",
current_timestamp(), 
current_user(), 
null, 
null, 
"ETL_TASK_RUN_ID",
"ETL_ROW_HASH", 
"RAW_FILE_NAME"
)