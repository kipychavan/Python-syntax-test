merge into {{ params.snowDB }}.{{ params.snowSchema }}.{{ params.snowTable }} as TGT
using (select * from (select *,row_number() over(partition by PRODUCT_ID
order by PRODUCT_ID ) as r  from
 {{ params.snowDB }}.{{ params.snowSchema }}.{{ params.snowHistTablestream }})where r=1) as SRC
on SRC.PRODUCT_ID=TGT.PRODUCT_ID
when matched and SRC."METADATA$ACTION" = 'INSERT' then update set 
CDC_FUNC = SRC.CDC_FUNC,
PRODUCT_ID = SRC.PRODUCT_ID,
DESCRIPTION = SRC.DESCRIPTION,
REPORT_DESCRIPTION = SRC.REPORT_DESCRIPTION,
SIZE_DESCRIPTOR = SRC.SIZE_DESCRIPTOR,
CLASS_ID = SRC.CLASS_ID,
SIZE_ID = SRC.SIZE_ID,
VENDOR_ID = SRC.VENDOR_ID,
SUPPLIER_ID = SRC.SUPPLIER_ID,
BRAND_ID = SRC.BRAND_ID,
LABEL_ID = SRC.LABEL_ID,
QTY_PER_CASE = SRC.QTY_PER_CASE,
EQUIVILANT_CASE = SRC.EQUIVILANT_CASE,
NINE_LITER_EQUIV = SRC.NINE_LITER_EQUIV,
PROOF = SRC.PROOF,
GALLONS_PER_CASE = SRC.GALLONS_PER_CASE,
LITERS_PER_CASE = SRC.LITERS_PER_CASE,
UPC_CODE = SRC.UPC_CODE,
SUPPLIER_PRODUCT_NUMBER = SRC.SUPPLIER_PRODUCT_NUMBER,
CATEGORY_ID = SRC.CATEGORY_ID,
CORPORATE_GROUP_CODE = SRC.CORPORATE_GROUP_CODE,
SUPPLIER_GROUP_CODE = SRC.SUPPLIER_GROUP_CODE,
HOUSE_GROUP_CODE = SRC.HOUSE_GROUP_CODE,
LIFO_COST = SRC.LIFO_COST,
PALLET_SIZE = SRC.PALLET_SIZE,
LAYER_SIZE = SRC.LAYER_SIZE,
CREATED_DATE = SRC.CREATED_DATE,
PROD_STATUS = SRC.PROD_STATUS,
SIZE_CODE = SRC.SIZE_CODE,
SUPPLIER_EQUIV = SRC.SUPPLIER_EQUIV,
SUPP_PERF_GROUP_CODE = SRC.SUPP_PERF_GROUP_CODE,
WINE_GROUP_CODE = SRC.WINE_GROUP_CODE,
DOH_TARGET = SRC.DOH_TARGET,
COUNTRY_CODE = SRC.COUNTRY_CODE,
STATE_CODE = SRC.STATE_CODE,
REGION_CODE = SRC.REGION_CODE,
PRODTYPE_CODE = SRC.PRODTYPE_CODE,
VINTAGES = SRC.VINTAGES,
VINTAGE_SENSITIVE = SRC.VINTAGE_SENSITIVE,
COLOR = SRC.COLOR,
FLAVOR = SRC.FLAVOR,
BRAND_SUB_GROUP_CODE = SRC.BRAND_SUB_GROUP_CODE,
SCC_NUM = SRC.SCC_NUM,
ETL_UPDATE_DATE = current_timestamp(), 
ETL_UPDATE_USER_ID = current_user(), 
ETL_TASK_RUN_ID = SRC.ETL_TASK_RUN_ID, 
ETL_ROW_HASH = SRC.ETL_ROW_HASH, 
RAW_FILE_NAME = SRC.RAW_FILE_NAME
 
WHEN NOT MATCHED AND SRC."METADATA$ACTION" = 'INSERT' THEN INSERT 
(
"CDC_FUNC",
"PRODUCT_ID",
"DESCRIPTION",
"REPORT_DESCRIPTION",
"SIZE_DESCRIPTOR",
"CLASS_ID",
"SIZE_ID",
"VENDOR_ID",
"SUPPLIER_ID",
"BRAND_ID",
"LABEL_ID",
"QTY_PER_CASE",
"EQUIVILANT_CASE",
"NINE_LITER_EQUIV",
"PROOF",
"GALLONS_PER_CASE",
"LITERS_PER_CASE",
"UPC_CODE",
"SUPPLIER_PRODUCT_NUMBER",
"CATEGORY_ID",
"CORPORATE_GROUP_CODE",
"SUPPLIER_GROUP_CODE",
"HOUSE_GROUP_CODE",
"LIFO_COST",
"PALLET_SIZE",
"LAYER_SIZE",
"CREATED_DATE",
"PROD_STATUS",
"SIZE_CODE",
"SUPPLIER_EQUIV",
"SUPP_PERF_GROUP_CODE",
"WINE_GROUP_CODE",
"DOH_TARGET",
"COUNTRY_CODE",
"STATE_CODE",
"REGION_CODE",
"PRODTYPE_CODE",
"VINTAGES",
"VINTAGE_SENSITIVE",
"COLOR",
"FLAVOR",
"BRAND_SUB_GROUP_CODE",
"SCC_NUM",
"ETL_CREATE_DATE", 
"ETL_CREATE_USER_ID", 
"ETL_UPDATE_DATE", 
"ETL_UPDATE_USER_ID", 
"ETL_TASK_RUN_ID",
"ETL_ROW_HASH", 
"RAW_FILE_NAME"
)
VALUES
(
"CDC_FUNC",
"PRODUCT_ID",
"DESCRIPTION",
"REPORT_DESCRIPTION",
"SIZE_DESCRIPTOR",
"CLASS_ID",
"SIZE_ID",
"VENDOR_ID",
"SUPPLIER_ID",
"BRAND_ID",
"LABEL_ID",
"QTY_PER_CASE",
"EQUIVILANT_CASE",
"NINE_LITER_EQUIV",
"PROOF",
"GALLONS_PER_CASE",
"LITERS_PER_CASE",
"UPC_CODE",
"SUPPLIER_PRODUCT_NUMBER",
"CATEGORY_ID",
"CORPORATE_GROUP_CODE",
"SUPPLIER_GROUP_CODE",
"HOUSE_GROUP_CODE",
"LIFO_COST",
"PALLET_SIZE",
"LAYER_SIZE",
"CREATED_DATE",
"PROD_STATUS",
"SIZE_CODE",
"SUPPLIER_EQUIV",
"SUPP_PERF_GROUP_CODE",
"WINE_GROUP_CODE",
"DOH_TARGET",
"COUNTRY_CODE",
"STATE_CODE",
"REGION_CODE",
"PRODTYPE_CODE",
"VINTAGES",
"VINTAGE_SENSITIVE",
"COLOR",
"FLAVOR",
"BRAND_SUB_GROUP_CODE",
"SCC_NUM",
current_timestamp(), 
current_user(), 
null, 
null, 
"ETL_TASK_RUN_ID",
"ETL_ROW_HASH", 
"RAW_FILE_NAME"
)